#################################################################################
#                         OneBranch Pipelines - Official                        #
# This pipeline was created by EasyStart from a sample located at:              #
#   https://aka.ms/obpipelines/easystart/samples                                #
# Documentation:  https://aka.ms/obpipelines                                    #
# Yaml Schema:    https://aka.ms/obpipelines/yaml/schema                        #
# Retail Tasks:   https://aka.ms/obpipelines/tasks                              #
# Support:        https://aka.ms/onebranchsup                                   #
#################################################################################
 # https://aka.ms/obpipelines/triggers
trigger: 
- main

parameters: # parameters are shown up in ADO UI in a build queue time
- name: 'debug'
  displayName: 'Enable debug output'
  type: boolean
  default: false

variables:
  CDP_DEFINITION_BUILD_COUNT: $[counter('', 0)] # needed for onebranch.pipeline.version task https://aka.ms/obpipelines/versioning
  system.debug: ${{ parameters.debug }}
  ROOT: $(Build.SourcesDirectory)
  OUTPUTROOT: $(ROOT)\out
  BuildSolution: $(Build.SourcesDirectory)\CSM-MSXMP-ACCT-TransitionService.sln
  ApiProject: $(Build.SourcesDirectory)\MSX.Transition.API\MSX.Transition.API.csproj
  NugetConfig: $(Build.SourcesDirectory)\Nuget.config
  BuildConfiguration: Release

  WindowsContainerImage: 'onebranch.azurecr.io/windows/ltsc2019/vse2022:latest' # Docker image which is used to build the project https://aka.ms/obpipelines/containers

resources:
  repositories: 
    - repository: templates
      type: git
      name: OneBranch.Pipelines/GovernedTemplates
      ref: refs/heads/main

extends:
  template: v2/OneBranch.Official.CrossPlat.yml@templates # https://aka.ms/obpipelines/templates
  parameters:
    cloudvault: # https://aka.ms/obpipelines/cloudvault
      enabled: false
    globalSdl: # https://aka.ms/obpipelines/sdl
      tsa:
        enabled: false # onebranch publish all sdl results to TSA. If TSA is disabled all SDL tools will forced into 'break' build mode.
      # credscan:
      #   suppressionsFile: $(Build.SourcesDirectory)\.config\CredScanSuppressions.json
      #binskim:
        #break: true # always break the build on binskim issues in addition to TSA upload
      policheck:
        break: true # always break the build on policheck issues. You can disable it by setting to 'false'
      # suppression:
      #   suppressionFile: $(Build.SourcesDirectory)\.gdn\global.gdnsuppress

    stages:
    - stage: build
      jobs:
      - job: main
        pool:
          type: windows  # read more about custom job pool types at https://aka.ms/obpipelines/yaml/jobs
        
        variables:
          ob_outputDirectory: '$(Build.SourcesDirectory)\out' # this directory is uploaded to pipeline artifacts, reddog and cloudvault. More info at https://aka.ms/obpipelines/artifacts
          ob_sdl_binskim_break: true # https://aka.ms/obpipelines/sdl
          ob_sdl_binskim_scanOutputDirectoryOnly: true
          ob_sdl_roslyn_break: true
          ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}: # conditionally enable symbolsPublishing for main branch only
            ob_symbolsPublishing_enabled: true # https://aka.ms/obpipelines/symbols

        steps:
          - task: UseDotNet@2
            continueOnError: true
            displayName: 'Install DotNetApp 7.X'
            inputs:
              packageType: 'sdk'
              useGlobalJson: false
              performMultiLevelLookup: true

          - task: NuGetAuthenticate@1
            inputs:
              nuGetServiceConnections: 'msx.account.nuget.feed'

          - task: UseDotNet@2
            inputs:
              command: 'restore'
              restoreSolution: '**/*.sln'
              feedsToUse: 'config'
              nugetConfigPath: $(NugetConfig)'
              externalFeedCredentials: 'msx.account.nuget.feed'

          - task: VisualStudioTestPlatformInstaller@1
            inputs:
              packageFeedSelector: 'nugetOrg'
              versionSelector: 'latestPreRelease'

          - task: UseDotNet@2
            displayName: 'Install DotNet 3.1'
            continueOnError: true
            inputs:
              packageType: 'sdk'
              version: '3.1.201'
              useGlobalJson: false
              performMultiLevelLookup: true

          - task: onebranch.pipeline.version@1 # generates automatic version. For other versioning options check https://aka.ms/obpipelines/versioning
            displayName: 'Setup BuildNumber'
            inputs:
              system: 'RevisionCounter'
              major: '1'
              minor: '0'
              exclude_commit: true

          - task: DotNetCoreCLI@2
            displayName: 'DotNetCore restore and build the solution'
            inputs:
              command: 'custom'
              projects: $(BuildSolution)
              custom: 'restore'
              nugetConfigPath: '$(NugetConfig)'
              externalFeedCredentials: 'msx.account.nuget.feed'

          - task: RoslynAnalyzers@3 # roslynanalyzers task wraps around dotnet build to enable static analysis
            displayName: 'DotNetCore build with RoslynAnalyzers'
            inputs:
              userProvideBuildInfo: 'msBuildInfo'
              msBuildCommandline: 'dotnet.exe build $(BuildSolution) --no-restore --configuration $(BuildConfiguration)'

          - task: DotNetCoreCLI@2
            displayName: 'DotNetCore test'
            inputs:
              command: 'test'
              projects: '**/*UnitTests.csproj'
              arguments: '--no-build --no-restore --configuration $(BuildConfiguration) --logger trx --blame --collect "Code coverage" --settings $(Build.SourcesDirectory)\UnitTests.runsettings --results-directory $(Build.SourcesDirectory)\UT\TestResults\'
              publishTestResults: false
              testRunTitle: 'Transition UT and Code Coverage'

          - task: PublishTestResults@2
            displayName: 'Publish test results'
            inputs:
              testResultsFormat: VSTest
              testResultsFiles: '$(Build.SourcesDirectory)\UT\TestResults\**\*.trx'
              failTaskOnFailedTests: true

          - task: BuildQualityChecks@7
            displayName: 'Build Quality Checks'
            condition: and(succeeded(), eq(variables.IsMaster, true))
            inputs:
              checkCoverage: true
              coverageFailOption: 'fixed'
              coverageType: 'lines'
              coverageThreshold: '30.0'

          - task: DotNetCoreCLI@2
            displayName: 'DotNetCore publish Api'
            inputs:
              command: 'publish'
              publishWebProjects: false
              projects: $(ApiProject)
              arguments: '--no-build --no-restore --configuration $(BuildConfiguration) --output $(Build.SourcesDirectory)\out --framework net7.0'
              zipAfterPublish: false


          - task: onebranch.pipeline.signing@1 # https://aka.ms/obpipelines/signing
            displayName: 'Sign output'
            inputs:
              command: 'sign'
              signing_environment: 'azure-ado'
              files_to_sign: '**/*.exe;**/*.dll;**/*.ps1;**/*.psm1'
              search_root: '$(Build.SourcesDirectory)\out'

          - task: ArchiveFiles@2
            displayName: 'DotNetCore publish Api zip'
            inputs:
              rootFolderOrFile: '$(Build.SourcesDirectory)\out\MSX.Transition.API'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: $(Build.SourcesDirectory)\out\deploy\Transition.zip
              replaceExistingArchive: true


# https://aka.ms/obpipelines/cloudtest
# uncomment this section and edit parameters to enable CloudTest
    # - stage: cloudtest
    #   dependsOn: build_stage
    #   jobs:
    #   - job: cloudtestjob
    #     pool:
    #       type: cloudtestagentless
    #     continueOnError: true
    #     steps:
    #     - task: CloudTestServerBuildTask@1
    #       displayName: 'CloudTest'
    #       inputs:
    #         connectedServiceName: 'CloudTest-prod'
    #         cloudTestTenant: 'onebranchtest'
    #         testMapLocation: '[BuildRoot]\ClassLibrary.UnitTest\TestMapCdp.xml'
    #         pipelineArtifactName: 'drop_build_main'
    #         pipelineArtifactBuildUrl: '$(System.TaskDefinitionsUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)'
    #         parserProperties: 'worker:VsTestVersion=V150;CodeCoverageType=Dynamic;worker:TestVar=$(RUN_PIPELINE_VARIABLE)'
    #         cacheEnabled: false
    #         scheduleBuildRequesterAlias: 'azbldrun'